/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.util.*
import kotlin.random.Random

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val scanner = Scanner(System.`in`)
        var continuePlaying = true

        while (continuePlaying) {
            println("Start the number guessing game. Guess a number with $digitsToGuess unique digits.")

            val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
            println("A number has been generated. Try to guess it!")

            var hasGuessedCorrectly = false
            while (!hasGuessedCorrectly) {
                println("Please enter a number with $digitsToGuess digits:")
                val userInput = try {
                    scanner.nextInt()
                } catch (e: Exception) {
                    println("Invalid input. Please enter numbers only.")
                    scanner.next() // clear the scanner buffer
                    continue
                }

                try {
                    val result = checkUserInputAgainstGeneratedNumber(userInput, generatedNumber)
                    println(result)
                    hasGuessedCorrectly = result.m == digitsToGuess
                    if (hasGuessedCorrectly) {
                        println("Congratulations! You have guessed the number correctly.")
                    }
                } catch (e: IllegalArgumentException) {
                    println(e.message)
                }
            }

            println("Do you want to play again? (yes/no)")
            val userDecision = scanner.next()
            continuePlaying = userDecision.equals("yes", ignoreCase = true)
        }

    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        // return value is a placeholder
        if(length < 1 || length > 9){
            throw IllegalArgumentException("The length must be between 1 and 9")
        }

        generateSequence { Random.nextInt(1, 10) }
            .distinct()
            .take(length)
            .joinToString("")
            .toInt()
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        val inputStr = input.toString()
        val genNumStr = generatedNumber.toString()

        if (inputStr.length != genNumStr.length) {
            throw IllegalArgumentException("The inputs must have the same number of digits.")
        }

        val correctDigits = inputStr.filter { it in genNumStr }.toSet().size
        val correctPositions = inputStr.zip(genNumStr).count { it.first == it.second }

        CompareResult(correctDigits, correctPositions) // return value is a placeholder
    }
}

fun main() {
    // TODO: call the App.playNumberGame function with and without default arguments
    val app = App()
    app.playNumberGame(4)
}
